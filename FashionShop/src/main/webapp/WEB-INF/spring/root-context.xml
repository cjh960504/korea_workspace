<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- JNDI등록 : Mybatis가 아닌,  스프링이 접속객체를 주도한다. 왜? 스프링이 트랜잭션을 관리하므로 -->
	<jee:jndi-lookup jndi-name="jdbc/myoracle" resource-ref="true" id="dataSource"/>
	
	<!-- 각 기술에 맞는 트랜잭션 객체를 등록한다 
	ex) Hibernate 사용 시 : HibernateTaransactionManager  
		 jdbc 사용 시 : DataSourceTransactionManager
		 mybatis 사용 시 : DataSourceTransactionManager
	-->
	<bean 
	id="dataSourceTransactionManager" 
	class="org.springframework.jdbc.datasource.DataSourceTransactionManager" 
	p:dataSource-ref="dataSource"/>
	
	<!-- Spring JDBC 사용 시  -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" p:dataSource-ref="dataSource"/>
	
	<!-- Mybatis Spring 사용 시 -->
	<!-- Spring에서 지원하지 않기 떄문에 Mybatis Spring -->
	<!-- 클래스패스를 사용중이면 명시 필수!!! classpath: -->
	<bean id="sqlSessionFactoryBean" 
	class="org.mybatis.spring.SqlSessionFactoryBean"
	p:configLocation="classpath:com/koreait/fashionshop/mybatis/config/config.xml"
	p:dataSource-ref="dataSource"
	/>
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" >
		<constructor-arg ref="sqlSessionFactoryBean"/>
	</bean>
	
	<!-- 파일매니저 등록 -->
	
	<!-- 모델 영역은 모든 서블릿에서 공용으로 사용할 예정이므로, ServletContext 수준에서 어플리케이션이 가동될 때부터 등록되어 있어야한다. -->
		<!-- <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/> -->
	<context:component-scan base-package="com.koreait.fashionshop.model"/>
	
	<!-- DI와 같이 객체를 인터페이스로 보유하는 방식이 아니라, 공통코드를 외부로 완전히 분리시킨 후 
	원하는 시점에, 공통코드를 동작시키는 관점지향 프로그래밍을 가리켜 AOP라 부른다! -->
	<!-- 공통코드는 이미 어노테이션으로 등록되어 있다.. Bell-->
	<!-- 어느 시점에, 어떤 메서드 호출 시 공통코드를 동작시킬지를 xml로 서술해보자! -->
<!-- 	<aop:config>
		aspect로 누굴 삼을 것이냐~
		<aop:aspect id="bellAspect" ref="bell">
			어떤 메서드 실행 시 관여할 지 서술
			execution(접근지정자 반환형 패키지명)
			.. : 생략 즉, 모든 
			..*: respository 밑의 모든 클래스가 보유한 모든 메서드(매개변수가 상관없는) 
																						com...repository아래의 모든 클래스 내의 모든 매개변수가 상관없는메서드들 
			<aop:pointcut expression="execution(public * com.koreait.fashionshop.model.bank.repository..*(**))" id="bellPointcut"/>
			<aop:after method="ding" pointcut-ref="bellPointcut"/>
		</aop:aspect>
	</aop:config>
 -->	
	<!-- 방금 배운 AOP를 이용하여 트랜잭션 처리에 응용해보자!! -->
	<!-- 트랜잭션 설정 -->
	<!-- advice : 공통코드를 의미 -->
	<!-- 위에서 등록한 DBMS에 맞는 트랜잭션 매니저 참조 -->
	<tx:advice id="txAdvice" transaction-manager="dataSourceTransactionManager">  
		<tx:attributes>
			<!-- propagation : 전파규칙 디폴트 Required / rollback-for : 언제 롤백할 것이냐 Exception의 예외 시  -->
			<!-- <tx:method name="send" propagation="REQUIRED" rollback-for="Exception"/> -->
			<tx:method name="registOrder" propagation="REQUIRED" rollback-for="Exception"/>
		</tx:attributes>		
	</tx:advice>
	
	<!--  트랜잭션을 적용할 대상인 서비스 등록 -->
	<aop:config>
	<!-- 표현식의 해당하는 메서드들이 실행될 떄 -->
		<aop:pointcut expression="execution(public * com.koreait.fashionshop.model.payment.service..*(..))" id="txPointcut"/>
		<!-- 메시드 실행 시 txAdvice를 공통코드로 쓰겠다  -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
</beans>
